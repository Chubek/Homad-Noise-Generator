/*******************************************************************/
/*                                                                 */
/*                      ADOBE CONFIDENTIAL                         */
/*                   _ _ _ _ _ _ _ _ _ _ _ _ _                     */
/*                                                                 */
/* Copyright 2007-2015 Adobe Systems Incorporated                  */
/* All Rights Reserved.                                            */
/*                                                                 */
/* NOTICE:  All information contained herein is, and remains the   */
/* property of Adobe Systems Incorporated and its suppliers, if    */
/* any.  The intellectual and technical concepts contained         */
/* herein are proprietary to Adobe Systems Incorporated and its    */
/* suppliers and may be covered by U.S. and Foreign Patents,       */
/* patents in process, and are protected by trade secret or        */
/* copyright law.  Dissemination of this information or            */
/* reproduction of this material is strictly forbidden unless      */
/* prior written permission is obtained from Adobe Systems         */
/* Incorporated.                                                   */
/*                                                                 */
/*******************************************************************/

/*
	GLator.h
*/

#pragma once

#ifndef GLATOR_H
#define GLATOR_H

typedef unsigned char		u_char;
typedef unsigned short		u_short;
typedef unsigned short		u_int16;
typedef unsigned long		u_long;
typedef short int			int16;
typedef float				fpshort;

#define PF_TABLE_BITS	12
#define PF_TABLE_SZ_16	4096

#define PF_DEEP_COLOR_AWARE 1	// make sure we get 16bpc pixels; 
								// AE_Effect.h checks for this.
#include "AEConfig.h"

#ifdef AE_OS_WIN
	typedef unsigned short PixelType;
	#include <Windows.h>
#endif

#include "entry.h"
#include "AE_Effect.h"
#include "AE_EffectCB.h"
#include "AE_Macros.h"
#include "Param_Utils.h"
#include "AE_EffectCBSuites.h"
#include "String_Utils.h"
#include "AE_GeneralPlug.h"
#include "AEFX_ChannelDepthTpl.h"
#include "AEGP_SuiteHandler.h"

#include "GLator_Strings.h"

#include <vector>
#include <string>
/* Versioning information */

#define	MAJOR_VERSION	1
#define	MINOR_VERSION	0
#define	BUG_VERSION		0
#define	STAGE_VERSION	PF_Stage_DEVELOP
#define	BUILD_VERSION	1


/* Parameter defaults */

#define	THOR_SLIDER_MIN_VAL		0
#define	THOR_SLIDER_MAX_VAL		100
#define	THOR_SLIDER_MIN		0
#define	THOR_SLIDER_MAX		100
#define	THOR_SLIDER_DFLT		50



#define THOR_CHECKBOX_DFLT	true

enum {
	THOR_INPUT = 0,
	THOR_GENERIC_1D_START,
	THOR_GENERIC_1D_VALUE_1,
	THOR_GENERIC_1D_POS_MULT,
	THOR_GENERIC_1D_MIX,
	THOR_GENERIC_1D_END,
	THOR_GENERIC_2D_START,
	THOR_GENERIC_2D_VALUE_1,
	THOR_GENERIC_2D_VALUE_2,
	THOR_GENERIC_2D_POS_MULT,
	THOR_GENERIC_2D_MIX,
	THOR_GENERIC_2D_END,
	THOR_GENERIC_3D_START,
	THOR_GENERIC_3D_VALUE_1,
	THOR_GENERIC_3D_VALUE_2,
	THOR_GENERIC_3D_VALUE_3,
	THOR_GENERIC_3D_POS_MULT,
	THOR_GENERIC_3D_MIX,
	THOR_GENERIC_3D_END,
	THOR_PERLIN_2D_START,
	THOR_PERLIN_2D_VALUE_1,
	THOR_PERLIN_2D_VALUE_2,
	THOR_PERLIN_2D_DIM,
	THOR_PERLIN_2D_FREQ,
	THOR_PERLIN_2D_POS_MULT,
	THOR_PERLIN_2D_MIX,
	THOR_PERLIN_2D_END,
	THOR_PERLIN_3D_START,
	THOR_PERLIN_3D_VALUE_1,
	THOR_PERLIN_3D_VALUE_2,
	THOR_PERLIN_3D_VALUE_3,
	THOR_PERLIN_3D_POS_MULT,
	THOR_PERLIN_3D_MIX,
	THOR_PERLIN_3D_END,
	THOR_PERLIN_4D_START,
	THOR_PERLIN_4D_VALUE_1,
	THOR_PERLIN_4D_VALUE_2,
	THOR_PERLIN_4D_VALUE_3,
	THOR_PERLIN_4D_VALUE_4,
	THOR_PERLIN_4D_POS_MULT,
	THOR_PERLIN_4D_MIX,
	THOR_PERLIN_4D_END,
	THOR_SIMPLEX_2D_START,
	THOR_SIMPLEX_2D_VALUE_1,
	THOR_SIMPLEX_2D_VALUE_2,
	THOR_SIMPLEX_2D_POS_MULT,
	THOR_SIMPLEX_2D_MIX,
	THOR_SIMPLEX_2D_END,
	THOR_SIMPLEX_3D_START,
	THOR_SIMPLEX_3D_VALUE_1,
	THOR_SIMPLEX_3D_VALUE_2,
	THOR_SIMPLEX_3D_VALUE_3,
	THOR_SIMPLEX_3D_POS_MULT,
	THOR_SIMPLEX_3D_MIX,
	THOR_SIMPLEX_3D_END,
	THOR_SIMPLEX_4D_START,
	THOR_SIMPLEX_4D_VALUE_1,
	THOR_SIMPLEX_4D_VALUE_2,
	THOR_SIMPLEX_4D_VALUE_3,
	THOR_SIMPLEX_4D_VALUE_4,
	THOR_SIMPLEX_4D_POS_MULT,
	THOR_SIMPLEX_4D_MIX,
	THOR_SIMPLEX_4D_END,
	THOR_VIQ_2D_START,
	THOR_VIQ_2D_VALUE_1,
	THOR_VIQ_2D_VALUE_2,
	THOR_VIQ_2D_U_MULT,
	THOR_VIQ_2D_V_MULT,
	THOR_VIQ_2D_POS_MULT,
	THOR_VIQ_2D_MIX,
	THOR_VIQ_2D_END,
	THOR_VORONOI_2D_START,
	THOR_VORONOI_2D_VALUE_1,
	THOR_VORONOI_2D_VALUE_2,
	THOR_VORONOI_2D_POS_MULT,
	THOR_VORONOI_2D_MIX,
	THOR_VORONOI_2D_END,
	THOR_FRACTBROWN_1D_START,
	THOR_FRACTBROWN_1D_VALUE_1,
	THOR_FRACTBROWN_1D_POS_MULT,
	THOR_FRACTBROWN_1D_MIX,
	THOR_FRACTBROWN_1D_END,
	THOR_FRACTBROWN_2D_START,
	THOR_FRACTBROWN_2D_VALUE_1,
	THOR_FRACTBROWN_2D_VALUE_2,
	THOR_FRACTBROWN_2D_POS_MULT,
	THOR_FRACTBROWN_2D_MIX,
	THOR_FRACTBROWN_2D_END,
	THOR_FRACTBROWN_3D_START,
	THOR_FRACTBROWN_3D_VALUE_1,
	THOR_FRACTBROWN_3D_VALUE_2,
	THOR_FRACTBROWN_3D_VALUE_3,
	THOR_FRACTBROWN_3D_POS_MULT,
	THOR_FRACTBROWN_3D_MIX,
	THOR_FRACTBROWN_3D_END,
	THOR_FRACTBROWN_IQ_START,
	THOR_FRACTBROWN_IQ_VALUE_1,
	THOR_FRACTBROWN_IQ_VALUE_2,
	THOR_FRACTBROWN_IQ_VALUE_3,
	THOR_FRACTBROWN_IQ_VALUE_4,
	THOR_FRACTBROWN_IQ_POS_MULT,
	THOR_FRACTBROWN_IQ_MIX,
	THOR_FRACTBROWN_IQ_END,
	THOR_DISPLACE_START,
	THOR_GENERIC_1D_CB,
	THOR_GENERIC_2D_CB,
	THOR_GENERIC_3D_CB,
	THOR_PERLIN_2D_CB,
	THOR_PERLIN_3D_CB,
	THOR_PERLIN_4D_CB,
	THOR_SIMPLEX_2D_CB,
	THOR_SIMPLEX_3D_CB,
	THOR_SIMPLEX_4D_CB,
	THOR_VIQ_2D_CB,
	THOR_VORONOI_2D_CB,
	THOR_FACTBROWN_1D_CB,
	THOR_FACTBROWN_2D_CB,
	THOR_FACTBROWN_3D_CB,
	THOR_FACTBROWN_4D_CB,
	THOR_DISPLACE_END,
	THOR_NUM_PARAMS
};

enum {
	THOR_GENERIC_1D_START_DISK_ID = 1,
	THOR_GENERIC_1D_VALUE_1_DISK_ID,
	THOR_GENERIC_1D_POS_MULT_DISK_ID,
	THOR_GENERIC_1D_MIX_DISK_ID,
	THOR_GENERIC_1D_END_DISK_ID,
	THOR_GENERIC_2D_START_DISK_ID,
	THOR_GENERIC_2D_VALUE_1_DISK_ID,
	THOR_GENERIC_2D_VALUE_2_DISK_ID,
	THOR_GENERIC_2D_POS_MULT_DISK_ID,
	THOR_GENERIC_2D_MIX_DISK_ID,
	THOR_GENERIC_2D_END_DISK_ID,
	THOR_GENERIC_3D_START_DISK_ID,
	THOR_GENERIC_3D_VALUE_1_DISK_ID,
	THOR_GENERIC_3D_VALUE_2_DISK_ID,
	THOR_GENERIC_3D_VALUE_3_DISK_ID,
	THOR_GENERIC_3D_POS_MULT_DISK_ID,
	THOR_GENERIC_3D_MIX_DISK_ID,
	THOR_GENERIC_3D_END_DISK_ID,
	THOR_PERLIN_2D_START_DISK_ID,
	THOR_PERLIN_2D_VALUE_1_DISK_ID,
	THOR_PERLIN_2D_VALUE_2_DISK_ID,
	THOR_PERLIN_2D_DIM_DISK_ID,
	THOR_PERLIN_2D_FREQ_DISK_ID,
	THOR_PERLIN_2D_POS_MULT_DISK_ID,
	THOR_PERLIN_2D_MIX_DISK_ID,
	THOR_PERLIN_2D_END_DISK_ID,
	THOR_PERLIN_3D_START_DISK_ID,
	THOR_PERLIN_3D_VALUE_1_DISK_ID,
	THOR_PERLIN_3D_VALUE_2_DISK_ID,
	THOR_PERLIN_3D_VALUE_3_DISK_ID,
	THOR_PERLIN_3D_POS_MULT_DISK_ID,
	THOR_PERLIN_3D_MIX_DISK_ID,
	THOR_PERLIN_3D_END_DISK_ID,
	THOR_PERLIN_4D_START_DISK_ID,
	THOR_PERLIN_4D_VALUE_1_DISK_ID,
	THOR_PERLIN_4D_VALUE_2_DISK_ID,
	THOR_PERLIN_4D_VALUE_3_DISK_ID,
	THOR_PERLIN_4D_VALUE_4_DISK_ID,
	THOR_PERLIN_4D_POS_MULT_DISK_ID,
	THOR_PERLIN_4D_MIX_DISK_ID,
	THOR_PERLIN_4D_END_DISK_ID,
	THOR_SIMPLEX_2D_START_DISK_ID,
	THOR_SIMPLEX_2D_VALUE_1_DISK_ID,
	THOR_SIMPLEX_2D_VALUE_2_DISK_ID,
	THOR_SIMPLEX_2D_POS_MULT_DISK_ID,
	THOR_SIMPLEX_2D_MIX_DISK_ID,
	THOR_SIMPLEX_2D_END_DISK_ID,
	THOR_SIMPLEX_3D_START_DISK_ID,
	THOR_SIMPLEX_3D_VALUE_1_DISK_ID,
	THOR_SIMPLEX_3D_VALUE_2_DISK_ID,
	THOR_SIMPLEX_3D_VALUE_3_DISK_ID,
	THOR_SIMPLEX_3D_POS_MULT_DISK_ID,
	THOR_SIMPLEX_3D_MIX_DISK_ID,
	THOR_SIMPLEX_3D_END_DISK_ID,
	THOR_SIMPLEX_4D_START_DISK_ID,
	THOR_SIMPLEX_4D_VALUE_1_DISK_ID,
	THOR_SIMPLEX_4D_VALUE_2_DISK_ID,
	THOR_SIMPLEX_4D_VALUE_3_DISK_ID,
	THOR_SIMPLEX_4D_VALUE_4_DISK_ID,
	THOR_SIMPLEX_4D_POS_MULT_DISK_ID,
	THOR_SIMPLEX_4D_MIX_DISK_ID,
	THOR_SIMPLEX_4D_END_DISK_ID,
	THOR_VIQ_2D_START_DISK_ID,
	THOR_VIQ_2D_VALUE_1_DISK_ID,
	THOR_VIQ_2D_VALUE_2_DISK_ID,
	THOR_VIQ_2D_U_MULT_DISK_ID,
	THOR_VIQ_2D_V_MULT_DISK_ID,
	THOR_VIQ_2D_POS_MULT_DISK_ID,
	THOR_VIQ_2D_MIX_DISK_ID,
	THOR_VIQ_2D_END_DISK_ID,
	THOR_VORONOI_2D_START_DISK_ID,
	THOR_VORONOI_2D_VALUE_1_DISK_ID,
	THOR_VORONOI_2D_VALUE_2_DISK_ID,
	THOR_VORONOI_2D_POS_MULT_DISK_ID,
	THOR_VORONOI_2D_MIX_DISK_ID,
	THOR_VORONOI_2D_END_DISK_ID,
	THOR_FRACTBROWN_1D_START_DISK_ID,
	THOR_FRACTBROWN_1D_VALUE_1_DISK_ID,
	THOR_FRACTBROWN_1D_POS_MULT_DISK_ID,
	THOR_FRACTBROWN_1D_MIX_DISK_ID,
	THOR_FRACTBROWN_1D_END_DISK_ID,
	THOR_FRACTBROWN_2D_START_DISK_ID,
	THOR_FRACTBROWN_2D_VALUE_1_DISK_ID,
	THOR_FRACTBROWN_2D_VALUE_2_DISK_ID,
	THOR_FRACTBROWN_2D_POS_MULT_DISK_ID,
	THOR_FRACTBROWN_2D_MIX_DISK_ID,
	THOR_FRACTBROWN_2D_END_DISK_ID,
	THOR_FRACTBROWN_3D_START_DISK_ID,
	THOR_FRACTBROWN_3D_VALUE_1_DISK_ID,
	THOR_FRACTBROWN_3D_VALUE_2_DISK_ID,
	THOR_FRACTBROWN_3D_VALUE_3_DISK_ID,
	THOR_FRACTBROWN_3D_POS_MULT_DISK_ID,
	THOR_FRACTBROWN_3D_MIX_DISK_ID,
	THOR_FRACTBROWN_3D_END_DISK_ID,
	THOR_FRACTBROWN_IQ_START_DISK_ID,
	THOR_FRACTBROWN_IQ_VALUE_1_DISK_ID,
	THOR_FRACTBROWN_IQ_VALUE_2_DISK_ID,
	THOR_FRACTBROWN_IQ_VALUE_3_DISK_ID,
	THOR_FRACTBROWN_IQ_VALUE_4_DISK_ID,
	THOR_FRACTBROWN_IQ_POS_MULT_DISK_ID,
	THOR_FRACTBROWN_IQ_MIX_DISK_ID,
	THOR_FRACTBROWN_IQ_END_DISK_ID,
	THOR_DISPLACE_START_DISK_ID,
	THOR_GENERIC_1D_CB_DISK_ID,
	THOR_GENERIC_2D_CB_DISK_ID,
	THOR_GENERIC_3D_CB_DISK_ID,
	THOR_PERLIN_2D_CB_DISK_ID,
	THOR_PERLIN_3D_CB_DISK_ID,
	THOR_PERLIN_4D_CB_DISK_ID,
	THOR_SIMPLEX_2D_CB_DISK_ID,
	THOR_SIMPLEX_3D_CB_DISK_ID,
	THOR_SIMPLEX_4D_CB_DISK_ID,
	THOR_VIQ_2D_CB_DISK_ID,
	THOR_VORONOI_2D_CB_DISK_ID,
	THOR_FACTBROWN_1D_CB_DISK_ID,
	THOR_FACTBROWN_2D_CB_DISK_ID,
	THOR_FACTBROWN_3D_CB_DISK_ID,
	THOR_FACTBROWN_4D_CB_DISK_ID,
	THOR_DISPLACE_END_DISK_ID,

};

enum
{
	NOISE_GENERIC, 
	NOISE_PERLIN,
	NOISE_SIMPLEX,
	NOISE_VORONOI,
	NOISE_FRACTBROWN,
	NOISE_1D = 1,
	NOISE_2D = 2,
	NOISE_3D = 3,
	NOISE_4D = 4,
	
};

struct Noise
{
	std::string noise_name = "";
	int noise_type;
	int noise_dim;	
	std::vector<float> values;
	float mix;
	float pos_mult;
	float u_mult;
	float v_mult;
	float perl_dim;
	float freq;

	Noise(int type, int dim, std::vector<float> vals, float mixer, float pos_multer, float u, float v, float perl, float _freq)
	{
		noise_type = type; noise_dim = dim; values = vals; mix = mixer; pos_mult = pos_multer; u_mult = u; v_mult = v; perl_dim = dim; freq = _freq;
		ConstructName();
	}
	void ConstructName()
	{
		switch (noise_type)
		{
		case 0:
			noise_name += "Generic ";
			break;
		case 1:
			noise_name += "Perlin ";
			break;
		case 2:
			noise_name += "Simplex ";
			break;
		case 3:
			noise_name += "Voronoi ";
			break;
		case 4:
			noise_name += "Factbrownian ";
			break;

		}

		noise_name += std::to_string(noise_dim) + "D";
	}



};


float bool2float(bool bd)
{
	return (bd == true) ? 1.00 : 0.00;
}


extern "C" {
	
	DllExport
	PF_Err 
	EffectMain(
		PF_Cmd			cmd,
		PF_InData		*in_data,
		PF_OutData		*out_data,
		PF_ParamDef		*params[],
		PF_LayerDef		*output,
		void			*extra);

}

//helper func
inline u_char AlphaLookup(u_int16 inValSu, u_int16 inMaxSu)
{
	fpshort normValFp = 1.0f - (inValSu)/static_cast<fpshort>(inMaxSu);
	return static_cast<u_char>(normValFp*normValFp*0.8f*255);
}

//error checking macro
#define CHECK(err) {PF_Err err1 = err; if (err1 != PF_Err_NONE ){ throw PF_Err(err1);}}

#endif // GLATOR_H